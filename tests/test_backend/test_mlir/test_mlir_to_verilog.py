import io
import pytest
from typing import Optional

import magma as m
from magma.backend.mlir.mlir_to_verilog import (
    mlir_to_verilog,
    circt_opt_binary_exists,
    MlirToVerilogError,
    MlirToVerilogOpts,
)
from magma.testing.utils import with_config


_with_nonexistent_circt_home = with_config(
    "circt_home", "/this_isnt_a_real_directory/"
)


def _skip_if_circt_opt_binary_does_not_exist():
    if not circt_opt_binary_exists():
        pytest.skip("no circt-opt binary found")


def _run_test(input_: Optional[str] = None, **kwargs):
    istream = io.TextIOWrapper(io.BytesIO())
    ostream = io.TextIOWrapper(io.BytesIO())
    if input_ is not None:
        istream.write(input_)
        istream.seek(0)
    opts = MlirToVerilogOpts(**kwargs)
    mlir_to_verilog(istream.buffer, ostream.buffer, opts)
    return istream, ostream


def test_no_binary(_with_nonexistent_circt_home):
    with pytest.raises(FileNotFoundError):
        _run_test()


def test_basic():
    _skip_if_circt_opt_binary_does_not_exist()
    _, __ = _run_test()


def test_module():
    _skip_if_circt_opt_binary_does_not_exist()
    _, ostream = _run_test("module {}\n")
    ostream.seek(0)
    assert (
        ostream.read() == (
            "// Generated by CIRCT circtorg-0.0.0-658-g0d82b4bb2\n"
        )
    )


def test_bad_input():
    _skip_if_circt_opt_binary_does_not_exist()
    with pytest.raises(MlirToVerilogError):
        _run_test("blahblahblah")


@pytest.mark.parametrize("style", ("plain", "wrapInAtSquareBracket", "none"))
def test_location_info_style(style):
    _skip_if_circt_opt_binary_does_not_exist()
    opts = {
        "location_info_style": style,
    }
    _, ostream = _run_test("hw.module @M() -> () {}\n", **opts)
    ostream.seek(0)
    ostream.readline()  # skip header
    line = ostream.readline().rstrip()
    expected = "module M();"
    if style == "plain":
        expected += "	// <stdin>:1:1"
    elif style == "wrapInAtSquareBracket":
        expected += "	// @[<stdin>:1:1]"
    assert line == expected


@pytest.mark.parametrize("explicit_bitcast", (False, True))
def test_explicit_bitcast(explicit_bitcast):
    _skip_if_circt_opt_binary_does_not_exist()
    opts = {
        "explicit_bitcast": explicit_bitcast,
        "location_info_style": "none",
    }
    ir = (
        """
        hw.module @M(%a: i8, %b: i8) -> (y: i8) {
          %0 = comb.add %a, %b : i8
          hw.output %0 : i8
        }
        """
    )
    _, ostream = _run_test(ir, **opts)
    ostream.seek(0)
    # Skip first 5 lines (incl. header).
    for _ in range(6):
        ostream.readline()
    line = ostream.readline().strip()
    if not explicit_bitcast:
        expected = "assign y = a + b;"
    else:
        expected = "assign y = 8'(a + b);"
    assert line == expected
