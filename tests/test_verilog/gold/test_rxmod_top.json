{"top":"global.top",
"namespaces":{
  "global":{
    "modules":{
      "RXMOD":{
        "type":["Record",[
          ["RX","BitIn"],
          ["CLK","BitIn"],
          ["data",["Array",8,"Bit"]],
          ["valid","Bit"]
        ]],
        "metadata":{"verilog":{"verilog_string":"module RXMOD(\n  input RX, \n  input CLK,\n  output [7:0] data,\n  output valid);\n\nreg RX_1;\nreg RX_2;\nalways @(posedge CLK) begin\n  RX_1 <= RX;\n  RX_2 <= RX_1;\nend\n\nwire RXi;\nassign RXi = RX_2;\n\nreg [8:0] dataReg;\nreg validReg = 0;\nassign data = dataReg[7:0];\nassign valid = validReg;\n\nreg [12:0] readClock = 0; // which subclock?\nreg [3:0] readBit = 0; // which bit? (0-8)\nreg reading = 0;\n\n\nalways @ (posedge CLK)\nbegin\n  if(RXi==0 && reading==0) begin\n    reading <= 1;\n    readClock <= 150; // sample to middle of second byte\n    readBit <= 0;\n    validReg <= 0;\n  end else if(reading==1 && readClock==0 && readBit==8) begin\n    // we're done\n    reading <= 0;\n    dataReg[8] <= RXi;\n    validReg <= 1;\n  end else if(reading==1 && readClock==0) begin\n    // read a byte\n    dataReg[readBit] <= RXi;\n    readClock <= 100;\n    readBit <= readBit + 1;\n    validReg <= 0;\n  end else if(reading==1 && readClock>0) begin\n    readClock <= readClock - 1;\n    validReg <= 0;\n  end else begin\n    validReg <= 0;\n  end\nend\nendmodule"}}
      },
      "top":{
        "type":["Record",[
          ["RX","BitIn"],
          ["CLK","BitIn"],
          ["data",["Array",8,"Bit"]],
          ["valid","Bit"]
        ]],
        "instances":{
          "RXMOD_inst0":{
            "modref":"global.RXMOD"
          }
        },
        "connections":[
          ["self.CLK","RXMOD_inst0.CLK"],
          ["self.RX","RXMOD_inst0.RX"],
          ["self.data","RXMOD_inst0.data"],
          ["self.valid","RXMOD_inst0.valid"]
        ]
      }
    }
  }
}
}
