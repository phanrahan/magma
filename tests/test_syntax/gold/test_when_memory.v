// Generated by CIRCT unknown git version
module Memory(	// <stdin>:1:1
  input  [4:0] RADDR,
  input        CLK,
  input  [4:0] WADDR,
  input  [7:0] WDATA,
  input        WE,
  output [7:0] RDATA);

  reg [31:0][7:0] coreir_mem32x8_inst0;	// <stdin>:2:10

  always_ff @(posedge CLK) begin	// <stdin>:6:5
    if (WE)	// <stdin>:7:9
      coreir_mem32x8_inst0[WADDR] <= WDATA;	// <stdin>:5:10, :8:13
  end // always_ff @(posedge)
  assign RDATA = coreir_mem32x8_inst0[RADDR];	// <stdin>:3:10, :4:10, :11:5
endmodule

module Foo(	// <stdin>:13:1
  input  [7:0] data0,
  input  [4:0] addr0,
  input        en0,
  input  [7:0] data1,
  input  [4:0] addr1,
  input        en1,
               CLK,
  output [7:0] out);

  wire [7:0] _Memory_inst0_RDATA;	// <stdin>:15:10
  reg  [4:0] O0_reg;	// <stdin>:17:10
  reg  [4:0] O1_reg;	// <stdin>:18:10
  reg  [7:0] O2_reg;	// <stdin>:19:11
  reg        O3_reg;	// <stdin>:20:11
  reg  [7:0] O4_reg;	// <stdin>:21:11

  always_comb begin	// <stdin>:22:5
    O0_reg = 5'h0;	// <stdin>:23:15, :24:9
    O1_reg = 5'h0;	// <stdin>:23:15, :25:9
    O2_reg = 8'h0;	// <stdin>:26:15, :27:9
    O3_reg = 1'h0;	// <stdin>:28:15, :29:9
    if (en0) begin	// <stdin>:30:9
      O1_reg = addr0;	// <stdin>:31:13
      O2_reg = data0;	// <stdin>:32:13
      O3_reg = 1'h1;	// <stdin>:14:10, :33:13
      O0_reg = addr0;	// <stdin>:34:13
      O4_reg = _Memory_inst0_RDATA;	// <stdin>:15:10, :35:13
    end
    else if (en1) begin	// <stdin>:30:9
      O1_reg = addr1;	// <stdin>:38:17
      O2_reg = data1;	// <stdin>:39:17
      O3_reg = 1'h1;	// <stdin>:14:10, :40:17
      O0_reg = addr1;	// <stdin>:41:17
      O4_reg = _Memory_inst0_RDATA;	// <stdin>:15:10, :42:17
    end
  end // always_comb
  Memory Memory_inst0 (	// <stdin>:15:10
    .RADDR (O0_reg),	// <stdin>:46:10
    .CLK   (CLK),
    .WADDR (O1_reg),	// <stdin>:47:10
    .WDATA (O2_reg),	// <stdin>:48:10
    .WE    (O3_reg),	// <stdin>:49:10
    .RDATA (_Memory_inst0_RDATA)
  );
  assign out = O4_reg;	// <stdin>:50:10, :51:5
endmodule

