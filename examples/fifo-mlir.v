// Generated by CIRCT unknown git version
// external module coreir_mem4x32

module RAM4x32(	// <stdin>:2:1
  input  [1:0]  RADDR,
                WADDR,
  input  [31:0] WDATA,
  input         CLK,
                WE,
  output [31:0] RDATA);

  coreir_mem4x32 coreir_mem4x32_inst0 (	// <stdin>:3:10
    .raddr (RADDR),
    .waddr (WADDR),
    .wdata (WDATA),
    .clk   (CLK),
    .wen   (WE),
    .rdata (RDATA)
  );
endmodule

module Mux2xOutBits3(	// <stdin>:6:1
  input  [2:0] I0,
               I1,
  input        S,
  output [2:0] O);

  wire [1:0][2:0] _GEN = {{I1}, {I0}};	// <stdin>:7:10
  assign O = _GEN[S];	// <stdin>:7:10, :9:10, :10:5
endmodule

module FIFO(	// <stdin>:12:1
  input         data_in_data_sign,
  input  [7:0]  data_in_data_exponent,
  input  [22:0] data_in_data_significand,
  input         data_in_valid,
                data_out_ready,
                CLK,
  output        data_in_ready,
                data_out_data_sign,
  output [7:0]  data_out_data_exponent,
  output [22:0] data_out_data_significand,
  output        data_out_valid);

  wire        _GEN;	// <stdin>:51:11
  reg  [2:0]  reg_P_inst1;	// <stdin>:36:11
  reg  [2:0]  reg_P_inst0;	// <stdin>:18:10
  wire [31:0] _RAM4x32_inst0_RDATA;	// <stdin>:87:11
  wire [2:0]  _Mux2xOutBits3_inst0_O;	// <stdin>:35:11
  wire [2:0]  _Mux2xOutBits3_inst1_O;	// <stdin>:17:10
  wire        _GEN_0 = data_in_valid & ~_GEN;	// <stdin>:33:11, :34:11, :51:11
  always_ff @(posedge CLK) begin	// <stdin>:37:5
    reg_P_inst0 <= _Mux2xOutBits3_inst1_O;	// <stdin>:17:10, :20:9
    reg_P_inst1 <= _Mux2xOutBits3_inst0_O;	// <stdin>:35:11, :38:9
  end // always_ff @(posedge)
  initial begin	// <stdin>:40:5
    reg_P_inst0 = 3'h0;	// <stdin>:22:10, :24:9
    reg_P_inst1 = 3'h0;	// <stdin>:22:10, :41:9
  end // initial
  assign _GEN = reg_P_inst0[1:0] == reg_P_inst1[1:0] & (reg_P_inst0[2] ^ reg_P_inst1[2]);	// <stdin>:26:10, :29:11, :43:11, :46:11, :47:11, :48:11, :49:11, :50:11, :51:11
  Mux2xOutBits3 Mux2xOutBits3_inst1 (	// <stdin>:17:10
    .I0 (reg_P_inst0),	// <stdin>:26:10
    .I1 (reg_P_inst0 + 3'h1),	// <stdin>:13:10, :14:10, :26:10
    .S  (data_out_ready),
    .O  (_Mux2xOutBits3_inst1_O)
  );
  Mux2xOutBits3 Mux2xOutBits3_inst0 (	// <stdin>:35:11
    .I0 (reg_P_inst1),	// <stdin>:43:11
    .I1 (reg_P_inst1 + 3'h1),	// <stdin>:13:10, :31:11, :43:11
    .S  (_GEN_0),	// <stdin>:34:11
    .O  (_Mux2xOutBits3_inst0_O)
  );
  RAM4x32 RAM4x32_inst0 (	// <stdin>:87:11
    .RADDR (reg_P_inst0[1:0]),	// <stdin>:26:10, :53:11
    .WADDR (reg_P_inst1[1:0]),	// <stdin>:43:11, :54:11
    .WDATA ({data_in_data_significand, data_in_data_exponent, data_in_data_sign}),	// <stdin>:86:11
    .CLK   (CLK),
    .WE    (_GEN_0),	// <stdin>:34:11
    .RDATA (_RAM4x32_inst0_RDATA)
  );
  assign data_in_ready = ~_GEN;	// <stdin>:51:11, :52:11, :122:5
  assign data_out_data_sign = _RAM4x32_inst0_RDATA[0];	// <stdin>:87:11, :88:11, :122:5
  assign data_out_data_exponent = _RAM4x32_inst0_RDATA[8:1];	// <stdin>:87:11, :97:11, :122:5
  assign data_out_data_significand = _RAM4x32_inst0_RDATA[31:9];	// <stdin>:87:11, :121:11, :122:5
  assign data_out_valid = data_out_ready;	// <stdin>:122:5
endmodule

